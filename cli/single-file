#!/usr/bin/env node

/*
 * Copyright 2010-2020 Gildas Lormeau
 * contact : gildas.lormeau <at> gmail.com
 *
 * This file is part of SingleFile.
 *
 *   The code in this file is free software: you can redistribute it and/or
 *   modify it under the terms of the GNU Affero General Public License
 *   (GNU AGPL) as published by the Free Software Foundation, either version 3
 *   of the License, or (at your option) any later version.
 *
 *   The code in this file is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 *   General Public License for more details.
 *
 *   As additional permission under GNU AGPL version 3 section 7, you may
 *   distribute UNMODIFIED VERSIONS OF THIS file without the copy of the GNU
 *   AGPL normally required by section 4, provided you include this license
 *   notice and a URL through which recipients can access the Corresponding
 *   Source.
 */

/* global require, URL */

const VALID_URL_TEST = /^(https?|file):\/\//;

const fileUrl = require("file-url");
const fs = require("fs");
const options = require("./args");

const backEnds = {
	jsdom: "./back-ends/jsdom.js",
	puppeteer: "./back-ends/puppeteer.js",
	"puppeteer-firefox": "./back-ends/puppeteer-firefox.js",
	"webdriver-chromium": "./back-ends/webdriver-chromium.js",
	"webdriver-gecko": "./back-ends/webdriver-gecko.js"
};
if (options.url && !VALID_URL_TEST.test(options.url)) {
	options.url = fileUrl(options.url);
}
options.retrieveLinks = true;
options.browserScripts = options.browserScripts.map(path => require.resolve(path));
const backend = require(backEnds[options.backEnd]);
run(options);

async function run(options) {
	await backend.initialize(options);
	let tasks;
	if (options.urlsFile) {
		tasks = fs.readFileSync(options.urlsFile).toString().split("\n")
			.map(url => ({ url: rewriteURL(url, options.urlRewriteRules), originalUrl: url, depth: 0 }))
			.filter(task => task.url);
	} else {
		tasks = [{ url: rewriteURL(options.url, options.urlRewriteRules), originalUrl: options.url, depth: 0 }];
	}
	await runTasks(tasks, options);
	if (options.crawlReplaceURLs) {
		tasks.forEach(task => {
			try {
				let pageContent = fs.readFileSync(task.filename).toString();
				tasks.forEach(otherTask => {
					pageContent = pageContent.replace(new RegExp(escapeRegExp("\"" + otherTask.originalUrl + "\""), "gi"), "\"" + otherTask.filename + "\"");
					pageContent = pageContent.replace(new RegExp(escapeRegExp("'" + otherTask.originalUrl + "'"), "gi"), "'" + otherTask.filename + "'");
					const filename = otherTask.filename.replace(/ /g, "%20");
					pageContent = pageContent.replace(new RegExp(escapeRegExp("=" + otherTask.originalUrl + " "), "gi"), "=" + filename + " ");
					pageContent = pageContent.replace(new RegExp(escapeRegExp("=" + otherTask.originalUrl + ">"), "gi"), "=" + filename + ">");
				});
				fs.writeFileSync(task.filename, pageContent);
			} catch (error) {
				// ignored
			}
		});
	}
	if (!options.browserDebug) {
		return backend.closeBrowser();
	}
}

async function runTasks(tasks, options) {
	const availableTasks = tasks.filter(task => !task.status).length;
	const processingTasks = tasks.filter(task => task.status == "processing").length;
	const promisesTasks = [];
	for (let workerIndex = 0; workerIndex < Math.min(availableTasks, options.maxParallelWorkers - processingTasks); workerIndex++) {
		promisesTasks.push(runNextTask(tasks, options));
	}
	await Promise.all(promisesTasks);
}

async function runNextTask(tasks, options) {
	const task = tasks.find(task => !task.status);
	if (task) {
		options = JSON.parse(JSON.stringify(options));
		options.url = task.url;
		task.status = "processing";
		const pageData = await capturePage(options);
		task.status = "processed";
		if (pageData) {
			task.filename = pageData.filename;
			if (options.crawlLinks && (options.crawlMaxDepth == 0) || (task.depth < options.crawlMaxDepth)) {
				let newTasks = pageData.links
					.map(urlLink => ({ url: rewriteURL(urlLink, options.urlRewriteRules), originalUrl: urlLink, depth: task.depth + 1 }))
					.filter(task => task.url && VALID_URL_TEST.test(task.url) && !tasks.find(otherTask => otherTask.url == task.url));
				if (options.crawlInnerLinksOnly) {
					const urlHost = getHostURL(options.url);
					newTasks = newTasks.filter(task => task.url.startsWith(urlHost));
				}
				tasks.splice(tasks.length, 0, ...newTasks);
			}
		}
		await runTasks(tasks, options);
	}
}

function rewriteURL(url, rewriteRules) {
	url = url.trim();
	rewriteRules.forEach(rewriteRule => {
		const parts = rewriteRule.trim().split(/ +/);
		if (parts.length == 2) {
			url = url.replace(new RegExp(parts[0]), parts[1]).trim();
		}
	});
	return url;
}

function getHostURL(url) {
	url = new URL(url);
	return url.protocol + "//" + (url.username ? url.username + (url.password || "") + "@" : "") + url.hostname;
}

async function capturePage(options) {
	try {
		const pageData = await backend.getPageData(options);
		if (options.output) {
			fs.writeFileSync(getFilename(options.output), pageData.content);
		} else {
			if (options.filenameTemplate && pageData.filename) {
				fs.writeFileSync(getFilename(pageData.filename), pageData.content);
			} else {
				console.log(pageData.content); // eslint-disable-line no-console
			}
		}
		return pageData;
	} catch (error) {
		const message = "URL: " + options.url + "\nStack: " + error.stack + "\n";
		if (options.errorFile) {
			fs.writeFileSync(options.errorFile, message, { flag: "a" });
		} else {
			console.error(message); // eslint-disable-line no-console
		}
	}
}

function getFilename(filename, index = 1) {
	let newFilename = filename;
	if (index > 1) {
		const regExpMatchExtension = /(\.[^.]+)$/;
		const matchExtension = newFilename.match(regExpMatchExtension);
		if (matchExtension && matchExtension[1]) {
			newFilename = newFilename.replace(regExpMatchExtension, " - " + index + matchExtension[1]);
		} else {
			newFilename += " - " + index;
		}
	}
	if (fs.existsSync(newFilename)) {
		return getFilename(filename, index + 1);
	} else {
		return newFilename;
	}
}

function escapeRegExp(string) {
	return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}